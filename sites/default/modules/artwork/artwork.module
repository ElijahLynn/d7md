<?php

/**
 * @file
 * Artwork entity stuff.
 */

/**
 * Implements hook_menu().
 */
function artwork_menu() {
  $items['admin/structure/artworks'] = array(
    'title' => 'Manage artworks',
    'description' => 'Manage artworks.',
    'page callback' => 'artwork_overview_types',
    'access arguments' => array('administer artworks'),
    'file' => 'artwork.admin.inc',
  );
  $items['admin/structure/artworks/manage/%artwork_type'] = array(
    'title' => 'View artwork type',
    'title callback' => 'artwork_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'artwork_information',
    'page arguments' => array(4),
    'access arguments' => array('administer artworks'),
    'file' => 'artwork.admin.inc',
  );
  $items['admin/structure/artworks/manage/%artwork_type/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['artwork/add'] = array(
    'title' => 'Add new artwork',
    'page callback' => 'artwork_add_page',
    'access arguments' => array('create artworks'),
    'weight' => 1,
    'menu_name' => 'navigation',
    'file' => 'artwork.pages.inc',
  );
  foreach (artwork_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['artwork/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'artwork_add',
      'page arguments' => array(2),
      'access arguments' => array('create artworks'),
      'description' => $type->description,
      'file' => 'artwork.pages.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function artwork_permission() {
  return array(
    'administer artworks' => array(
      'title' => t('Administer artworks'),
    ),
    'create artworks' => array(
      'title' => t('Create artworks'),
    ),
    'update artworks' => array(
      'title' => t('Update artworks'),
    ),
    'view artworks' => array(
      'title' => t('View artworks'),
    ),
    'delete artworks' => array(
      'title' => t('Delete artworks'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function artwork_entity_info() {
  $return['artwork'] = array(
    'label' => t('Artwork'),
    'controller class' => 'ArtworkController',
    'base table' => 'artwork',
    'revision table' => 'artwork_revision',
    'uri callback' => 'artwork_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    // Initialize for use in the foreach() below.
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  // Primarily here to support the Field API.
  // Also see artwork_menu().
  foreach (artwork_types() as $type => $info) {
    $return['artwork']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/artworks/manage/%artwork_type',
        'real path' => 'admin/structure/artworks/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer artworks'),
      ),
    );
  }

  return $return;
}

/**
 * Implements callback_entity_info_uri().
 *
 * @see artwork_entity_info()
 * @see entity_uri()
 */
function artwork_uri($artwork) {
  return array(
    'path' => 'artwork/' . $artwork->aid,
  );
}

/**
 * Get the Artwork bundle types.
 *
 * return object
 *   A list of all the Artwork bundle types.
 */
function artwork_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['painting'] = (object) array(
      'type' => 'painting',
      'name' => t('Painting'),
      'description' => t('A picture made with paint.'),
    );
    $types['sculpture'] = (object) array(
      'type' => 'sculpture',
      'name' => t('Sculpture'),
      'description' => t('A carving made out of wood or stone'),
    );
  }

  return $types;
}

/**
 * Load the Artwork entity.
 *
 * @see artwork_entity_info()
 */
function artwork_type_load($type) {
  $types = artwork_types();
  $type = str_replace('-', '_', $type);

  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Wrapper around artwork_load_multiple().
 */
function artwork_load($aid = NULL, $vid = NULL, $reset = FALSE) {
  $aids = (isset($aid) ? array($aid) : array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $artwork = artwork_load_multiple($aids, $conditions, $reset);

  return $artwork ? reset($artwork) : FALSE;
}

/**
 * Wrapper around entity_load().
 *
 * entity_load() actually will create a new instance of ArtworkController and call the
 * inherited load() method on it.
 */
function artwork_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('artwork', $aids, $conditions, $reset);
}

/**
 * Implements hook_forms().
 *
 * All artwork forms share the same handler.
 *
 * @see node_forms()
 */
function artwork_forms() {
  $forms = array();
  if ($types = artwork_types()) {
    foreach (array_keys($types) as $type) {
      $forms[$type . '_artwork_form']['callback'] = 'artwork_form';
    }
  }

  return $forms;
}

/**
 * Form builder for our Artwork bundles.
 *
 * @see artwork_forms()
 */
function artwork_form($form, &$form_state, $artwork) {
  // Set the ID to identify this as an artwork edit form.
  $form['#id'] = 'artwork-form';

  // Save the artwork for later, in case we need it.
  $form['#artwork'] = $artwork;
  $form_state['artwork'] = $artwork;

  // Common fields. We don't have many.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $artwork->title,
    '#weight' => -5,
    '#required' => TRUE,
  );

  $form['revision'] = array(
    '#access' => user_access('administer artworks'),
    '#type' => 'checkbox',
    '#title' => t('Create new revision'),
    '#default_value' => 0,
  );

  // Add the buttons.
  $form['buttons'] = array();
  $form['buttons']['#weight'] = 100;
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 5,
    '#submit' => array('artwork_form_submit'),
  );

  if (!empty($artwork->aid)) {
    $form['buttons']['delete'] = array(
      '#access' => user_access('delete artworks'),
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#weight' => 15,
      '#submit' => array('artwork_form_delete_submit'),
    );
  }

  $form['#validate'][] = 'artwork_form_validate';

  field_attach_form('artwork', $artwork, $form, $form_state);

  return $form;
}

/**
 * Validation handler for artwork_form().
 */
function artwork_form_validate($form, &$form_state) {
  $artwork = $form_state['artwork'];

  // Field validation.
  field_attach_form_validate('artwork', $artwork, $form, $form_state);
}
