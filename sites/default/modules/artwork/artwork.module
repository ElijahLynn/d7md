<?php

/**
 * @file
 * Artwork entity stuff.
 */

/**
 * Implements hook_entity_info().
 */
function artwork_entity_info() {
  $return['artwork'] = array(
    'label' => t('Artwork'),
    'controller class' => 'ArtworkController',
    'base table' => 'artwork',
    'revision table' => 'artwork_revision',
    'uri callback' => 'artwork_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'aid',
      'revision' => 'vid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    // Initialize for use in the foreach() below.
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  // Primarily here to support the Field API.
  foreach (artwork_types() as $type => $info) {
    $return['artwork']['bundles'][$type] = array(
      'label' => $info->name,
      'admin' => array(
        'path' => 'admin/structure/artworks/manage/%artwork_type',
        'real path' => 'admin/structure/artworks/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer artworks'),
      ),
    );
  }

  return $return;
}

/**
 * Implements callback_entity_info_uri().
 *
 * @see artwork_entity_info()
 * @see entity_uri()
 */
function artwork_uri($artwork) {
  return array(
    'path' => 'artwork/' . $artwork->aid,
  );
}

/**
 * Get the Artwork bundle types.
 *
 * return object
 *   A list of all the Artwork bundle types.
 */
function artwork_types() {
  $types = &drupal_static(__FUNCTION__);

  if (empty($types)) {
    $types['painting'] = (object) array(
      'type' => 'painting',
      'name' => t('Painting'),
      'description' => t('A picture made with paint.'),
    );
    $types['sculpture'] = (object) array(
      'type' => 'sculpture',
      'name' => t('Sculpture'),
      'description' => t('A carving made out of wood or stone'),
    );
  }

  return $types;
}

/**
 * Load the Artwork entity.
 *
 * @see artwork_entity_info()
 */
function artwork_type_load($type) {
  $types = artwork_types();
  $type = str_replace('-', '_', $type);

  return isset($types[$type]) ? $types[$type] : FALSE;
}

/**
 * Wrapper around artwork_load_multiple().
 */
function artwork_load($aid = NULL, $vid = NULL, $reset = FALSE) {
  $aids = (isset($aid) ? array($aid) : array());
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $artwork = artwork_load_multiple($aids, $conditions, $reset);

  return $artwork ? reset($artwork) : FALSE;
}

/**
 * Wrapper around entity_load().
 *
 * entity_load() actually will create a new instance of ArtworkController and call the
 * inherited load() method on it.
 */
function artwork_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('artwork', $aids, $conditions, $reset);
}
